{"version":3,"sources":["components/plants/plantDefaultImage.svg","components/Spinner.jsx","pages/NoMatch.jsx","components/sort/SortForm.js","components/filter/FilterGroupCheckbox.js","components/filter/FilterGroupRadio.js","actions/getFieldofObj.js","components/filter/FilterForm.js","components/plants/PlantMonthLine.jsx","components/plants/FavoritePlant.jsx","icons/moisture.js","icons/sun.js","components/plants/PlantCard.jsx","pages/PlantsList.jsx","pages/Home.jsx","pages/Plant.jsx","AppRoutes.jsx","components/SearchForm.jsx","components/TopBar.jsx","components/Navbar.jsx","components/SiteLocation.jsx","Main.jsx","actions/getStoredPlants.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","props","size","className","role","NoMatch","SortForm","handleChange","bind","e","sortBy","target","value","sortType","selectedIndex","getAttribute","this","onChange","htmlFor","id","data-sorttype","React","Component","FilterGroupCheckbox","state","activeFilters","console","log","checked","filterName","filterValue","match","find","item","name","options","push","index","indexOf","splice","setState","filter","filters","trigger","label","transitionTime","map","option","key","type","data-filtername","getFieldofObj","obj","k","keys","split","values","length","k1","k2","filterNames","FilterForm","changeFilter","forEach","i","fieldsObj","fields","FilterGroupRadio","PlantMonthLine","plant","location","country","state_","bloomMonths","flowers","months","bloomColor","colors","colorMain","colorsArr","fruitMonths","fruits","fruitColor","isDeciduous","leaves","retention","conspicuousFall","displayColor","displayText","seasonArr","seasonStart","leafRetention","start","seasonLeaves","seasonEnd","end","leafColor","fallColor","noColor","monthsArr","includes","toString","month","text","color","style","backgroundColor","FavoritePlant","addClass","toggleFavorite","favoritesArrJson","favoritesArr","localStorage","getItem","JSON","parse","stringify","setItem","data-id","onClick","xmlns","viewBox","d","moistureIcon","itemName","toLowerCase","replace","class","transform","sunIcon","cx","cy","r","PlantCard","orient","thumb1","src","plantDefaultImage","alt","t1","thumb","height","width","sm","md","lg","Math","round","default","srcSet","fileType","sizes","to","pathname","slug","lightNeeds","soils","moistureNeeds","taxa","commonName","border","PlantsList","fetchMoreData","activePlants","plants","scrollCount","hasMore","setTimeout","items","concat","slice","searchTerm","showFavorites","plantsAll","changeSort","term","genus","commonAlts","scientificFamily","commonFamily","sortKey","sort","a","b","a_sortBy","b_sortBy","activeFiltersCount","filterGroup","arr","filterKey","plantFieldArr","Array","isArray","some","dataLength","next","loader","Home","history","search","Plant","params","plantSlug","region","imgArr","images","license","iNatSrc","plantTypes","href","join","native","regions","exotic","lifeCycle","conspicuous","seasons","types","phNeeds","nitrogen","fallColors","min","max","unit","spread","attracts","tolerant","gardens","externalLinks","url","rel","sources","from","image","credit","AppRoute","exact","path","render","strict","component","SearchForm","handleSubmit","termArr","onSubmit","selected","clearButton","placeholder","withRouter","TopBar","handleSearch","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","activeClassName","SiteLocation","Main","hasPlants","handleUpdate","fetch","process","headers","then","response","json","data","AppRoutes","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e00274fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plantDefaultImage.8ede97b7.svg\";","import React from 'react';\n\nfunction Spinner(props) {\n  let size = \"\";\n  if (props.size === 'sm') size='spinner-border-sm'\n  return(\n      <div className={\"spinner-border text-primary ml-3 \" + size} role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n  );\n}\n\nexport default Spinner\n","import React from 'react'\n\nconst NoMatch = () => (\n  <div className=\"container-fluid\">\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <h1>Page not found</h1>\n      </div>\n    </div>\n  </div>\n);\n\nexport default NoMatch;\n","import React from 'react'\n//import SortOption from './SortOption'\n\nexport class SortForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const sortBy = e.target.value;\n    const sortType = e.target[e.target.selectedIndex].getAttribute('data-sorttype');\n    this.props.onChange(sortBy,sortType);\n  }\n  render() {\n    return (\n      <div className=\"form-group row\">\n        <label htmlFor=\"select-sort-by\" className=\"col-sm-4 col-form-label\">Sort by</label>\n        <div className=\"col-sm-8\">\n          <select id=\"select-sort-by\" className=\"custom-select\" onChange={this.handleChange}>\n            <option value=\"name\" data-sorttype=\"alpha\">Scientific Name</option>\n            <option value=\"height.max\" data-sorttype=\"num\">Height - Maximum</option>\n            <option value=\"taxa.commonName\" data-sorttype=\"alpha\">Common Name</option>\n          </select>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SortForm;\n","import React from 'react'\nimport Collapsible from 'react-collapsible';\n\n\nexport class FilterGroupCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeFilters: this.props.activeFilters\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    console.log('handleChange');\n    console.log(e.target.value);\n    console.log(e.target.checked);\n    const filterName = this.props.filterName\n    const filterValue = e.target.value;\n    let activeFilters = this.state.activeFilters;\n    //console.log(activeFilters);\n    // setup the activeFilter array as soon as something is clicked\n    let match = activeFilters.find( item => item.name === filterName );\n    //console.log(match);\n    //console.log(match.options);\n    if (e.target.checked) {\n      match.options.push(filterValue);\n      //console.log(match.options);\n    } else {\n      const index = match.options.indexOf(filterValue);\n      if (index > -1) {\n        match.options.splice(index, 1);\n      }\n      //console.log(match.options);\n    }\n    console.log(activeFilters);\n    this.setState({\n      activeFilters: activeFilters\n    })\n    this.props.onChange(activeFilters);\n  }\n\n  render(){\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const id = filterName + \"-\";\n    //console.log(this.props.filters);\n    //console.log(filterName);\n    //console.log(filter);\n    return (\n      <Collapsible\n        trigger={filter.label}\n        transitionTime={200}\n        >\n        {filter.options.map( (option, key) => (\n          <div className=\"form-check\" key={key}>\n            <input className=\"form-check-input\" type=\"checkbox\" data-filtername={filterName} value={option} id={id + option} onChange={this.handleChange} />\n            <label className=\"form-check-label\" htmlFor={option}>{option}</label>\n          </div>\n        ))}\n      </Collapsible>\n    )\n  }\n}\nexport default FilterGroupCheckbox\n","import React from 'react'\nimport Collapsible from 'react-collapsible';\n\n\nexport class FilterGroupCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeFilters: this.props.activeFilters\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    //console.log('handleChange check');\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const filterValue = e.target.value;\n    //console.log(filterValue);\n    let activeFilters = this.state.activeFilters;\n    //console.log(activeFilters);\n    //console.log(activeFilter.length);\n    // setup the activeFilter array as soon as something is clicked\n    let match = activeFilters.find( item => item.name === filterName );\n    //console.log(match);\n    //console.log(match.options);\n    if (filterValue === \"all\") {\n      //console.log(\"1\");\n      match.options = filter.options\n    } else if (e.target.checked) {\n      //console.log(\"2\");\n      match.options = [filterValue]\n      //console.log(match.options);\n    } else {\n      //console.log(\"3\");\n      match.options = []\n      //console.log(match.options);\n    }\n    //console.log(activeFilters);\n    this.setState({\n      activeFilters: activeFilters\n    })\n    this.props.onChange(activeFilters);\n  }\n\n  render(){\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const id = filterName + \"-\";\n    return (\n      <Collapsible\n        trigger={filter.label}\n        transitionTime={200}\n        >\n          {filter.options.map( (option, key) => (\n            <div className=\"form-check\" key={key}>\n              <input className=\"form-check-input\" type=\"radio\" name={\"radio-\" + filterName} value={option} id={id + option} data-filtername={filterName} onChange={this.handleChange} />\n              <label className=\"form-check-label\" htmlFor={option}>{option}</label>\n            </div>\n          ))}\n      </Collapsible>\n    )\n  }\n}\nexport default FilterGroupCheckbox\n\n/*\n<div className=\"form-check\" key=\"none\">\n  <input className=\"form-check-input\" type=\"radio\" name={\"radio-\" + filterName} value=\"\" id={id + \"none\"} data-filtername={filterName} onChange={this.handleChange} />\n  <label className=\"form-check-label\" htmlFor=\"\">None</label>\n</div>\n*/\n","export function getFieldofObj(obj, k) {\n  let keys = k.split(\".\");\n  let values = obj[k];\n  if (keys.length === 2) {\n    let k1 = keys[0];\n    let k2 = keys[1];\n    values = obj[k1][k2]\n  }\n//  console.log(values);\n  return values\n}\n","import React from 'react'\nimport FilterGroupCheckbox from './FilterGroupCheckbox'\nimport FilterGroupRadio from './FilterGroupRadio'\nimport { getFieldofObj } from '../../actions/getFieldofObj.js';\nimport fields from '../../data/fields.json';\n\n//reenter these names in return() -> specify radio or checkbox\nconst filterNames = [\n  \"plantTypes\",\n  \"lifeCycle\",\n  \"lightNeeds\",\n  \"soils.moistureNeeds\",\n  \"flowers.colors\",\n  \"flowers.seasons\",\n]\n\nexport class FilterForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.changeFilter = this.changeFilter.bind(this);\n  }\n\n  changeFilter(activeFilters) {\n    //console.log(activeFilters);\n    this.props.onChange(activeFilters);\n  }\n\n  render() {\n    //console.log(fields);\n    //console.log(filterNames);\n    let filters = []\n    let activeFilters = []\n    filterNames.forEach( (k, i) => {\n      let fieldsObj = getFieldofObj(fields, k)\n      //console.log(fieldsArr);\n      filters.push(\n        {\n          name: k,\n          label: fieldsObj.label,\n          options: fieldsObj.options\n        }\n      )\n      activeFilters.push(\n        {\n          name: k,\n          options: []\n        }\n      )\n    });\n\n    //console.log(filters);\n    return (\n      <div className=\"filters\">\n        <h3>Filter By</h3>\n        <FilterGroupRadio onChange={this.changeFilter} filterName=\"plantTypes\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"lightNeeds\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"soils.moistureNeeds\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"flowers.colors\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"flowers.seasons\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupRadio onChange={this.changeFilter} filterName=\"lifeCycle\" filters={filters} activeFilters={activeFilters} />\n      </div>\n\n    )\n  }\n}\n\nexport default FilterForm;\n\n/*\n{filters.map( (filter, key) => (\n  <FilterGroupCheckbox onChange={this.changeFilter} filter={filter} activeFilters={activeFilters} key={key} />\n))}\n*/\n","import React from 'react'\nimport leafRetention from '../../data/leafRetentionByState.json';\nimport colorsArr from '../../data/colors.json';\nimport monthsArr from '../../data/months.json';\n\n\nconst PlantMonthLine = props =>  {\n  //console.log(props);\n  const plant = props.plant\n  const location = props.country + \":\" + props.state_\n//console.log(plant);\n  //console.log(location);\n  //console.log(leafRetention[location]);\n\n  const bloomMonths = plant.flowers.months\n  let bloomColor = plant.flowers.colors[0]\n  if (plant.flowers.colorMain) bloomColor = plant.flowers.colorMain\n  bloomColor = colorsArr[bloomColor]\n\n  const fruitMonths = plant.fruits.months\n  let fruitColor = plant.fruits.colors[0]\n  if (plant.fruits.colorMain) fruitColor = plant.fruits.colorMain\n  fruitColor = colorsArr[fruitColor]\n\n  let isDeciduous = false\n  if (plant.leaves.retention === \"Deciduous\") isDeciduous = true\n\n  let conspicuousFall = false\n  if (plant.leaves.conspicuousFall === true) conspicuousFall = true\n\n  let seasonArr = []\n  let seasonStart = leafRetention[location].start\n  let seasonLeaves = leafRetention[location].colors\n  let seasonEnd = leafRetention[location].end\n  let leafColor = colorsArr['Leaf']\n  let fallColor = colorsArr['Fall']\n  let noColor = colorsArr['None']\n  let displayColor;\n  let displayText;\n\n  for (let i = 1; i < 13; i++) {\n    displayText = \"\"\n    displayColor = \"\"\n    if (isDeciduous) {\n      if (i < seasonStart) { displayColor = noColor;}\n      if (i >= seasonStart) { displayColor = leafColor; displayText = monthsArr[i] + \": Leaves\" }\n      if (i === seasonLeaves && conspicuousFall) { displayColor = fallColor; displayText = monthsArr[i] + \": Fall Colors\" }\n      if (i > seasonEnd) { displayColor = noColor; displayText = \"\"}\n      if ( fruitMonths.includes(i.toString()) ) { displayColor = fruitColor; displayText = monthsArr[i] + \": Fruiting\" }\n      if ( bloomMonths.includes(i.toString()) ) { displayColor = bloomColor; displayText = monthsArr[i] + \": Blooming\" }\n    } else { displayColor = leafColor; displayText = \"Evergreen / Semi Evergreen\" }\n    seasonArr.push({\n      month: i,\n      text: displayText,\n      color: displayColor\n    })\n  }\n  //console.log(seasonArr);\n\n  return (\n    <div className=\"row no-gutters month-line\">\n      {seasonArr.map( (i, k) => (\n        <div\n          key={k}\n          className={\"col-1 month-\" + i.month}\n          style={{backgroundColor:  i.color}}>\n            {i.text !== \"\" ? <span className=\"monthtip\">{i.text}</span> : null }\n        </div>\n        )\n      )}\n    </div>\n  )\n}\n\nexport default PlantMonthLine\n","import React from 'react'\n\nexport class FavoritePlant extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //favoritesArr: [],\n      addClass: \"\",\n    };\n    this.toggleFavorite = this.toggleFavorite.bind(this);\n  }\n\n  toggleFavorite() {\n    const plant = this.props.plant\n    let favoritesArr = []\n    let favoritesArrJson\n    //console.log(favoritesArr);\n    if (localStorage.getItem('favorites')) favoritesArr = JSON.parse(localStorage.getItem('favorites'));\n    if ( favoritesArr && favoritesArr.includes(plant.id) ) {\n      favoritesArr = favoritesArr.filter(i => i !== plant.id);\n      favoritesArrJson = JSON.stringify(favoritesArr)\n      localStorage.setItem('favorites', favoritesArrJson);\n    } else {\n      favoritesArr.push(plant.id)\n      favoritesArrJson = JSON.stringify(favoritesArr)\n      localStorage.setItem('favorites', favoritesArrJson);\n    }\n\n    this.setState({\n      //favoritesArr: favoritesArr,\n      addClass: favoritesArr.includes(this.props.plant.id) ? \"fav-active\" : \"\",\n    })\n    //console.log(this.state.addClass);\n    //console.log(favoritesArr);\n  }\n\n  render(){\n    const plant = this.props.plant\n    let favoritesArr = []\n    let addClass = this.state.addClass\n    if (localStorage.getItem('favorites')) favoritesArr = JSON.parse(localStorage.getItem('favorites'))\n    if (favoritesArr.includes(this.props.plant.id)) addClass = \"fav-active\"\n    //console.log(favoritesArr);\n    //console.log(addClass);\n\n    return(\n      <button className={\"favorite btn btn-link \" + addClass} data-id={plant.id} onClick={this.toggleFavorite}>\n        <svg className=\"icon-heart\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 162.17 164.32\">\n          <path d=\"M81.08,26.57c35.2-42.69,92.22,7.33,58,49.88-29.44,36.62-58,75.54-58,75.56s-28.56-38.94-58-75.56C-11.12,33.9,45.88-16.12,81.08,26.57Z\" />\n        </svg>\n      </button>\n    )\n  }\n}\n\nexport default FavoritePlant\n","import React from 'react'\nexport function moistureIcon(item, index) {\n  const itemName = item.toLowerCase().replace(\" \",\"-\")\n  return(\n    <svg key={index} className={\"icon-moistureNeeds icon-\" + itemName} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 113.18 160.56\">\n      <g className=\"dropsSmall\">\n        <path class=\"dropWater\" d=\"M18.19,16.59S3.79,37.09,3.79,45.05a14.4,14.4,0,1,0,28.8,0C32.59,37.09,18.19,16.59,18.19,16.59ZM18,53.65a9,9,0,0,1-9-9,1.5,1.5,0,0,1,3,0,6,6,0,0,0,6,6,1.5,1.5,0,1,1,0,3Z\" transform=\"translate(-2.52 -0.99)\"/>\n        <path class=\"dropWater\" d=\"M58.68,15.28s-21,29.86-21,41.45a21,21,0,0,0,42,0C79.66,45.14,58.68,15.28,58.68,15.28ZM57,69.85A12.27,12.27,0,0,1,44.73,57.59a1.32,1.32,0,0,1,2.63,0A9.64,9.64,0,0,0,57,67.22a1.32,1.32,0,0,1,0,2.63Z\" transform=\"translate(-2.52 -0.99)\"/>\n        <path class=\"dropWater\" d=\"M102.43,36.15S91.2,52.14,91.2,58.34a11.24,11.24,0,1,0,22.47,0C113.67,52.14,102.43,36.15,102.43,36.15Zm-.9,30a7.36,7.36,0,0,1-7.36-7.35,1.5,1.5,0,0,1,3,0,4.36,4.36,0,0,0,4.36,4.35,1.5,1.5,0,0,1,0,3Z\" transform=\"translate(-2.52 -0.99)\"/>\n        <path class=\"dropWater\" d=\"M86,2.44S73.55,20.21,73.55,27.1a12.48,12.48,0,0,0,25,0C98.51,20.21,86,2.44,86,2.44ZM85,35.62a8,8,0,0,1-8-8,1.5,1.5,0,0,1,3,0,5,5,0,0,0,5,5,1.5,1.5,0,0,1,0,3Z\" transform=\"translate(-2.52 -0.99)\"/>\n        <path class=\"dropWater\" d=\"M38.43,1.1s-9.7,13.81-9.7,19.17a9.7,9.7,0,0,0,19.4,0C48.13,14.91,38.43,1.1,38.43,1.1Zm-.78,25.31a5.75,5.75,0,0,1-5.74-5.74,1,1,0,1,1,2,0,3.75,3.75,0,0,0,3.74,3.74,1,1,0,0,1,0,2Z\" transform=\"translate(-2.52 -0.99)\"/>\n        <path class=\"dropWater\" d=\"M105.58,1S98.41,11.2,98.41,15.16a7.17,7.17,0,0,0,14.34,0C112.75,11.2,105.58,1,105.58,1Zm-.7,18.3a3.87,3.87,0,0,1-3.9-3.84,1,1,0,0,1,2,0,1.87,1.87,0,0,0,1.9,1.84,1,1,0,0,1,0,2Z\" transform=\"translate(-2.52 -0.99)\"/>\n      </g>\n      <path class=\"dropMain\" d=\"M59.14,13.65S10.46,83,10.46,109.85a48.69,48.69,0,0,0,97.37,0C107.83,83,59.14,13.65,59.14,13.65ZM56.22,145a34.17,34.17,0,0,1-34.13-34.13,4.5,4.5,0,0,1,9,0A25.16,25.16,0,0,0,56.22,136a4.5,4.5,0,0,1,0,9Z\" transform=\"translate(-2.52 -0.99)\"/>\n      <g className=\"aquaticLines\">\n        <path className=\"aquaticLine\" d=\"M59.38,112.44a38.11,38.11,0,0,1-14.14-2.73l-4.54-1.8a16.38,16.38,0,0,0-12.38,0l-4.27,1.7a38.34,38.34,0,0,1-11.31,2.64,9.5,9.5,0,1,1-1.43-19A19.38,19.38,0,0,0,17,92l4.26-1.71a35.64,35.64,0,0,1,26.46,0l4.54,1.81a18.82,18.82,0,0,0,14.22,0L71,90.27a35.58,35.58,0,0,1,26.49,0L101.75,92a19.23,19.23,0,0,0,5.39,1.31,9.5,9.5,0,0,1-1.75,18.92,38.65,38.65,0,0,1-10.69-2.58l-4.29-1.72a16.5,16.5,0,0,0-12.39,0l-4.48,1.79A38.06,38.06,0,0,1,59.38,112.44Z\" transform=\"translate(-2.52 -0.99)\" />\n        <path className=\"aquaticLine\" d=\"M59.38,137a38.09,38.09,0,0,1-14.14-2.72l-4.54-1.81a16.42,16.42,0,0,0-12.38,0l-4.27,1.7a38.32,38.32,0,0,1-11.31,2.63,9.5,9.5,0,1,1-1.43-18.94,19.39,19.39,0,0,0,5.7-1.34l4.26-1.7a35.6,35.6,0,0,1,26.46,0l4.54,1.81a18.86,18.86,0,0,0,14.22,0L71,114.83a35.62,35.62,0,0,1,26.49,0l4.29,1.72a19.56,19.56,0,0,0,5.39,1.3,9.5,9.5,0,0,1-1.75,18.92,38,38,0,0,1-10.69-2.58l-4.29-1.71a16.4,16.4,0,0,0-12.39,0l-4.48,1.79A38.25,38.25,0,0,1,59.38,137Z\" transform=\"translate(-2.52 -0.99)\" />\n        <path className=\"aquaticLine\" d=\"M59.38,161.55a38.3,38.3,0,0,1-14.14-2.72L40.7,157a16.42,16.42,0,0,0-12.38,0l-4.27,1.71a38.32,38.32,0,0,1-11.31,2.63,9.5,9.5,0,0,1-1.43-19,19.07,19.07,0,0,0,5.7-1.33l4.26-1.7a35.55,35.55,0,0,1,26.46,0l4.54,1.81a18.86,18.86,0,0,0,14.22,0L71,139.38a35.58,35.58,0,0,1,26.49,0l4.29,1.72a19.56,19.56,0,0,0,5.39,1.3,9.5,9.5,0,0,1-1.75,18.92,38.65,38.65,0,0,1-10.69-2.58L90.41,157A16.4,16.4,0,0,0,78,157l-4.48,1.79A38.25,38.25,0,0,1,59.38,161.55Z\" transform=\"translate(-2.52 -0.99)\" />\n        <path className=\"aquaticLine\" d=\"M59.38,87.88a38.3,38.3,0,0,1-14.14-2.72L40.7,83.35a16.47,16.47,0,0,0-12.38,0l-4.27,1.71a38.32,38.32,0,0,1-11.31,2.63,9.5,9.5,0,1,1-1.43-19A19.07,19.07,0,0,0,17,67.41l4.26-1.7a35.55,35.55,0,0,1,26.46,0l4.54,1.81a18.86,18.86,0,0,0,14.22,0L71,65.71a35.58,35.58,0,0,1,26.49,0l4.29,1.72a19.56,19.56,0,0,0,5.39,1.3,9.5,9.5,0,0,1-1.75,18.92A38.3,38.3,0,0,1,94.7,85.07l-4.29-1.71a16.4,16.4,0,0,0-12.39,0l-4.48,1.79A38.25,38.25,0,0,1,59.38,87.88Z\" transform=\"translate(-2.52 -0.99)\" />\n      </g>\n    </svg>\n  )\n}\n","import React from 'react'\nexport function sunIcon(item, index) {\n  const itemName = item.toLowerCase().replace(\" \",\"-\")\n  return(\n    <svg key={index} className={\"icon-light icon-\" + itemName} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 131.47 131.47\">\n      <path className=\"sun-outer\" d=\"M65.6,7l10.09,14.7a13.84,13.84,0,0,0,13.93,5.77l17.52-3.26-3.26,17.52a13.83,13.83,0,0,0,5.77,13.93l14.69,10.08L109.65,75.82a13.82,13.82,0,0,0-5.77,13.93l3.26,17.52L89.62,104a13.82,13.82,0,0,0-13.93,5.77L65.6,124.48l-10.08-14.7A13.83,13.83,0,0,0,41.59,104l-17.53,3.26,3.26-17.52a13.82,13.82,0,0,0-5.77-13.93L6.86,65.73,21.55,55.65a13.83,13.83,0,0,0,5.77-13.93L24.06,24.2l17.53,3.26a13.85,13.85,0,0,0,13.93-5.77Z\"/>\n      <circle className=\"sun-inner\" cx=\"65.6\" cy=\"65.6\" r=\"26.29\"/>\n    </svg>\n  )\n}\n","import React from 'react'\n//import PlantFeature from './PlantFeature';\n//import { labels } from '../../data/cleanData'\nimport PlantMonthLine from './PlantMonthLine';\nimport FavoritePlant from './FavoritePlant';\nimport { Link } from \"react-router-dom\";\nimport plantDefaultImage from './plantDefaultImage.svg';\nimport colorsArr from '../../data/colors.json';\n//import star from '../../icons/star.svg';\nimport { moistureIcon } from '../../icons/moisture.js';\nimport { sunIcon } from '../../icons/sun.js';\n\n\nconst PlantCard = props =>  {\n  //console.log(props);\n  //console.log(plantDefaultImage);\n  const plant = props.plant\n  let thumb1 = <img src={plantDefaultImage} alt={plant.name} className=\"card-img-top\" />;\n  let orient\n  let t1 = plant.thumb['1'][0]\n  if (t1) {\n    let height = t1.height\n    let width = t1.width\n    orient = \"horiz\"\n    if ((height / width) > 1) orient = \"vert\"\n    let sm = 240\n    let md = 500\n    let lg = 1024\n    if (orient === \"vert\") {\n      sm = Math.round((width * 240) / height)\n      md = Math.round((width * 500) / height)\n      lg = Math.round((width * 1024) / height)\n    }\n\n    thumb1 = <img\n      alt={t1.alt}\n      className={'card-img-top img-' + orient }\n      src={t1.default}\n      srcSet={\n        \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm +\"w, \"\n        + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md +\"w, \"\n        + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg +\"w\"\n      }\n      sizes=\"100vw\"\n      />;\n      //console.log(thumb1.props.srcSet);\n\n      /*\n      sm = sm + \"w\"\n      md = md + \"w\"\n      lg = lg + \"w\"\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm +\"w\" + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md +\"w\" + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg +\"w\"\n\n      for horizonatal images.\n      sm = 240\n      md = 500\n      lg = 1024\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" 240w\"}\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" 500w\"}\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" 1024w\"}\n      for vertical images.\n      if (orient ==== \"vert\") {\n        sm = (width * 240) / height\n        md = (width * 500) / height\n        lg = (width * 1024) / height\n      }\n\n      example\n      srcset=\"elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w\"\n     sizes=\"(max-width: 600px) 480px,\n            800px\"\n            */\n\n  }\n  if (plant.thumb['2'][0]) {\n    //let thumb2 = <img src={plant.thumb['2'][0].default} alt={plant.thumb['2'][0].alt} className='card-img-top' />;\n  }\n\n  return (\n    <div className=\"col-12 col-sm-6 col-md-6 col-lg-4 col-xl-3 mb-1\">\n      <div className=\"card h-100 mr-2 ml-2 mt-1 mb-2\">\n        <Link to={{\n          pathname: `/plant/${plant.slug}`,\n          state: { plant :  plant }\n        }}>\n          <div className=\"card-head\">\n            {thumb1}\n            <div className=\"row careIcons\">\n              <dl className=\"col-6\">\n                <dt className=\"sr-only\">Light</dt>\n                <dd>{plant.lightNeeds.map((item, index) => sunIcon(item, index))}</dd>\n              </dl>\n              <dl className=\"col-6 text-right\">\n                <dt className=\"sr-only\">Moisture Needs</dt>\n                <dd>{plant.soils.moistureNeeds.map((item, index) => moistureIcon(item, index))} </dd>\n              </dl>\n            </div>\n          </div>\n        <FavoritePlant plant={plant} />\n        <PlantMonthLine plant={plant} country={props.country} state_={props.state_} />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n              {plant.name}\n          </h5>\n          <p>{plant.taxa.commonName}</p>\n          <div className=\"row\">\n          {plant.flowers.colors.length > 0 ? (\n            <dl className=\"col-6 mb-0\">\n              <dt className=\"sr-only\">Flower Colors</dt>\n              <dd className=\"\">{\n                plant.flowers.colors.map((color, index) =>\n                  <span\n                    key={index}\n                    className=\"color-block color-circle\"\n                    style={{backgroundColor:  colorsArr[color], border: \"1px solid #ccc\"} }\n                  >\n                  </span>\n                )}\n              </dd>\n            </dl>\n          ) : null}\n          {plant.fruits.colors.length > 0 ? (\n            <dl className=\"col-6 mb-0\">\n              <dt className=\"sr-only\">Fruit Colors</dt>\n              <dd className=\"\">{\n                plant.fruits.colors.map((color, index) =>\n                  <span\n                    key={index}\n                    className=\"color-block color-circle\"\n                    style={{backgroundColor:  colorsArr[color], border: \"1px solid #ccc\"} }\n                  >\n                  </span>\n                )}\n              </dd>\n            </dl>\n          ) : null}\n          {/*<div className=\"text-right\"><a target=\"_blank\" href={\"http://localhost:5000/edit-plant/select-images/\" + plant.slug}>Edit</a></div>*/}\n        </div>\n      </div>\n      </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default PlantCard\n\n/*\n<PlantFeature dt={''} dd={props.plant.taxa.commonName} />\n<PlantFeature dt={labels.height.ranges} dd={props.plant.height.ranges} />\n<PlantFeature dt={labels.lightNeeds} dd={props.plant.lightNeeds} />\n<PlantFeature dt={labels.soil.moistureNeeds} dd={props.plant.soil.moistureNeeds} />\n<PlantFeature dt={labels.flowers.seasons} dd={props.plant.flowers.seasons} />\n<dt className=\"col-12\">{labels.flowers.colors}</dt>\n*/\n","import React from 'react'\nimport SortForm from '../components/sort/SortForm'\nimport FilterForm from '../components/filter/FilterForm'\nimport PlantCard from '../components/plants/PlantCard'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Spinner from '../components/Spinner';\n//import ViewFavorites from '../components/plants/ViewFavorites'\n\nimport { getFieldofObj } from '../actions/getFieldofObj.js';\n\nclass PlantsList extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n    this.state = {\n      plants: this.props.plants,\n      searchTerm: this.props.searchTerm ? this.props.searchTerm : [],\n      items: [],\n      start: 0,\n      showFavorites: this.props.showFavorites? this.props.showFavorites : false\n    };\n    this.plantsAll = this.props.plants;\n    this.scrollCount = 20;\n    this.changeSort = this.changeSort.bind(this);\n    this.changeFilter = this.changeFilter.bind(this);\n    //this.handleSearch = this.handleSearch.bind(this);\n    this.fetchMoreData = this.fetchMoreData.bind(this);\n    //this.showFavorites = this.showFavorites.bind(this);\n  }\n\n  componentDidMount() {\n    //console.log(\"componentDidMount\");\n    let activePlants = this.state.plants;\n    let plants = this.plantsAll\n    //console.log(activePlants);\n    //console.log(plants);\n    //console.log(this.state.showFavorites);\n    //console.log(this.state.searchTerm);\n    if (this.state.showFavorites) {\n      let favoritesArr = []\n      if (localStorage.getItem('favorites')) favoritesArr = JSON.parse(localStorage.getItem('favorites'));\n      activePlants = plants.filter( plant => favoritesArr.includes(plant.id))\n      if (favoritesArr.length === 0) activePlants = plants\n    } else if (this.state.searchTerm.length){\n      let term = this.state.searchTerm[0] //[0].term\n      //console.log(term);\n      plants.forEach( item => {\n        if (item.name.includes(term)) activePlants.push(item)\n        else if (item.taxa.genus.includes(term)) activePlants.push(item)\n        else if (item.taxa.commonName && item.taxa.commonName.includes(term)) activePlants.push(item)\n        else if (item.taxa.commonAlts && item.taxa.commonAlts.includes(term)) activePlants.push(item)\n        else if (item.taxa.scientificFamily && item.taxa.scientificFamily.includes(term)) activePlants.push(item)\n        else if (item.taxa.commonFamily && item.taxa.commonFamily.includes(term)) activePlants.push(item)\n      });\n      console.log(activePlants);\n    } else activePlants = plants\n\n    this.setState({\n      plants: activePlants,\n      items: activePlants.slice(0, this.scrollCount),\n      start: this.scrollCount,\n      hasMore: activePlants.length > this.scrollCount ? true : false\n    });\n\n  }\n\n  changeSort(sortBy, sortType) {\n    //console.log('changeSort');\n    //console.log(newSortBy);\n    let plants = this.state.plants\n\n    var sortKey = sortBy.split('.');\n\n    if (sortType === 'alpha') {\n      plants.sort( function (a, b) {\n        let a_sortBy = a[sortKey[0]];\n        let b_sortBy = b[sortKey[0]];\n        if (sortKey.length === 2) {\n          a_sortBy = a[sortKey[0]][sortKey[1]];\n          b_sortBy = b[sortKey[0]][sortKey[1]];\n        }\n        if(a_sortBy < b_sortBy) { return -1; }\n        if(a_sortBy > b_sortBy) { return 1; }\n        return 0;\n      });\n    }\n    if (sortType === 'num') {\n      plants.sort( function (a, b) {\n        let a_sortBy = a[sortKey[0]];\n        let b_sortBy = b[sortKey[0]];\n        if (sortKey.length === 2) {\n          a_sortBy = a[sortKey[0]][sortKey[1]];\n          b_sortBy = b[sortKey[0]][sortKey[1]];\n        }\n        return a_sortBy - b_sortBy;\n      });\n    }\n    this.setState({\n      plants: plants,\n      items: plants.slice(0, this.scrollCount),\n      start: this.scrollCount,\n      hasMore: plants.length > this.scrollCount ? true : false\n    })\n  }\n\n  changeFilter(activeFilters) {\n    //console.log(activeFilters);\n    let activePlants = this.plantsAll\n    let plants = this.plantsAll\n    console.log(activePlants);\n    console.log(plants);\n\n    let activeFiltersCount = 0\n    activeFilters.forEach( (filterGroup, index, arr) => {\n      if (filterGroup.options.length > 0) {\n        console.log(filterGroup.options);\n        activeFiltersCount++\n        let filterKey = filterGroup.name;\n        //console.log(filterKey);\n          activePlants = activePlants.filter( plant => {\n            let plantFieldArr = getFieldofObj(plant, filterKey)\n            if (!Array.isArray(plantFieldArr)) plantFieldArr = [plantFieldArr]\n            //console.log(filterKey);\n            //console.log(plantFieldArr);\n            //console.log(filterGroup.options);\n\n            if (plantFieldArr.length === 0) {\n              //console.log(\"equal 0\");\n              return false\n            }\n            else if (plantFieldArr.length > 0) {\n              //console.log(\"> 0\");\n              //console.log(filterGroup);\n              //return filterGroup.options.some(item => filterGroup.options.indexOf(item) >= 0 );\n              return plantFieldArr.some(item => filterGroup.options.indexOf(item) >= 0 );\n            } else {\n              return true\n            }\n          });\n        }\n    });\n    //console.log(activeFiltersCount);\n    if (activeFiltersCount === 0) activePlants = plants\n    console.log(activePlants);\n    this.setState({\n      plants: activePlants,\n      items: activePlants.slice(0, this.scrollCount),\n      start: this.scrollCount,\n      hasMore: activePlants.length > this.scrollCount ? true : false\n    })\n  }\n\n  fetchMoreData = () => {\n    //console.log(\"fetchMoreData\");\n    // a fake async api call like which sends\n    // 20 more records in 1.5 secs\n    let activePlants = this.state.plants\n    const start = this.state.start\n    const end = start + this.scrollCount\n    //console.log(start);\n    //console.log(end);\n    //console.log(this.state.plants.length);\n    let hasMore = true\n    if (activePlants.length < (end - 1)) hasMore = false\n    //console.log(hasMore);\n    setTimeout(() => {\n      this.setState({\n        items: this.state.items.concat(activePlants.slice(start, end)),\n        start: end,\n        hasMore: hasMore\n      });\n    }, 1500);\n  };\n\n  render() {\n    let activePlants = this.state.plants\n    //console.log(this.state.items);\n    return(\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <SortForm onChange={this.changeSort} />\n          <FilterForm onChange={this.changeFilter} />\n        </div>\n        <div id=\"plantGrid\" className=\"col-9\">\n          <div className=\"text-right ml-2 mr-2 plant-count\">{activePlants.length} items</div>\n          <InfiniteScroll\n            dataLength={this.state.items.length}\n            next={this.fetchMoreData}\n            hasMore={this.state.hasMore}\n            loader={<div className=\"text-center\"><Spinner /></div>}\n          >\n            <div className=\"row no-gutters\">\n              {this.state.items.map( (plant, index) => {\n                  return <PlantCard plant={plant} key={plant.id} country={this.props.country} state_={this.props.state_} />\n                })\n              }\n            </div>\n          </InfiniteScroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlantsList;\n\n//            <ViewFavorites onChange={this.showFavorites} />\n\n//            <Sidebar onChange={this.changeSort}/>\n//\n","import React from 'react'\nimport PlantsList from './PlantsList'\n\nconst Home = props => {\n  console.log(\"here\");\n  console.log(props);\n  console.log(props.history);\n  console.log(props.history.location);\n  console.log(props.location.search);\n  //const plants = props.plants\n  return(\n    <PlantsList\n      plants={props.plants}\n      country={props.country}\n      state_={props.state_}\n      searchTerm={props.location.search}\n      showFavorites={props.showFavorites}\n />\n  );\n}\n\nexport default Home;\n","import React from 'react'\nimport Breadcrumbs from '../components/Breadcrumbs'\nimport plantDefaultImage from '../components/plants/plantDefaultImage.svg';\nimport PlantMonthLine from '../components/plants/PlantMonthLine';\nimport { moistureIcon } from '../icons/moisture.js';\nimport { sunIcon } from '../icons/sun.js';\n\nconst Plant = props => {\n  console.log(props);\n  const plants = props.plants\n  const plant = plants.find(plant => plant.slug === props.match.params.plantSlug)\n  const country = props.country\n  const state_ = props.state_\n  const region = country + ':' + state_\n  console.log(country);\n  console.log(region);\n  //console.log(plant);\n  let imgArr = []\n  if (plant.thumb['1'][0]) imgArr.push(plant.thumb['1'][0])\n  if (plant.thumb['2'][0]) imgArr.push(plant.thumb['2'][0])\n  imgArr = imgArr.concat(plant.images)\n  if (imgArr.length === 0 ) imgArr.push(\n    { src: plantDefaultImage,\n      alt: \"generic image\",\n      license: \"cc0\"\n    }\n  )\n  const iNatSrc = \"https://static.inaturalist.org/photos/\"\n\n  console.log(imgArr);\n  /*<Breadcrumbs plant={plant} />*/\n  return (\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <ul className=\"list-unstyled list-inline\">\n            {plant.plantTypes.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                <a href=\"/#\" >{i}</a>\n              </li>\n              )\n            )}\n          </ul>\n          <PlantMonthLine plant={plant} country={props.country} state_={props.state_} />\n          <p>{plant.taxa.scientificFamily} ({plant.taxa.commonFamily})</p>\n          <h1>{plant.name}</h1>\n          <p>\n            <strong>{plant.taxa.commonName}</strong>\n            {plant.taxa.commonAlts.length > 0 ? \", \" : null }\n            {plant.taxa.commonAlts.map( (i, key) => (\n                i\n              )\n            ).join(\", \")}\n          </p>\n          <div className=\"careIcons\">\n            <dl className=\"float-left\">\n              <dt className=\"sr-only\">Light</dt>\n              <dd>{plant.lightNeeds.map((item, index) => sunIcon(item, index))}</dd>\n            </dl>\n            <dl className=\"float-left\">\n              <dt className=\"sr-only\">Moisture Needs</dt>\n              <dd>{plant.soils.moistureNeeds.map((item, index) => moistureIcon(item, index))} </dd>\n            </dl>\n          </div>\n          <hr />\n          <h3>Native</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.native[country].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h3>{state_} Regions</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.regions[region].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          {plant.exotic[country] ? <h3>Exotic</h3> : null }\n          <ul className=\"list-unstyled list-inline\">\n            {plant.exotic[country] ? plant.exotic[country].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            ) : null}\n          </ul>\n          <hr />\n          <h3>Life Cycle</h3>\n          <p>{plant.lifeCycle}</p>\n          <hr />\n          <h3>Flowers</h3>\n            { plant.flowers.conspicuous === true ? <p>Conspicuous Flowers</p> : null }\n          <h4>Colors</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.colors.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Bloom Season</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.seasons.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Bloom Months</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.months.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Fruits</h3>\n            { plant.fruits.conspicuous === true ? <p>Conspicuous Fruits</p> : null }\n          <h4>Colors</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.colors.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Fruiting Season</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.seasons.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Fruiting Months</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.months.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Light</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.lightNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Soil</h3>\n          <h4>Moisture Needs</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.moistureNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Soil Types</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.types.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Soil pH</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.phNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Nitrogen</h4>\n          { plant.nitrogen === true ? <p>Fixes Nitrogen</p> : null }\n          <hr />\n          <h3>Leaves</h3>\n          { plant.leaves.fallColors === true ? <p>Fall Colors</p> : null }\n          <h4>Retention</h4>\n          <p>{plant.leaves.retention}</p>\n          <hr />\n          <h3>Height</h3>\n          {plant.height.min} – {plant.height.max} {plant.height.unit}\n          <hr />\n          <h3>Spread</h3>\n          {plant.spread.min} – {plant.spread.max} {plant.spread.unit}\n          <hr />\n          <h3>Attracts</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.attracts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Tolerant</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.tolerant.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Problems</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.attracts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Gardens</h3>\n          { plant.gardens === true ? <p>Good For Gardens</p> : null }\n          <hr />\n          <h3>External Links</h3>\n          <ul className=\"list-unstyled\">\n            {plant.externalLinks.map( (i, key) => (\n              <li className=\"\" key={key}>\n                <a href={i.url} target=\"_blank\" rel=\"noopener noreferrer\">{i.label}</a>\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Sources</h3>\n          <ul className=\"list-unstyled\">\n            {plant.sources.map( (i, key) => (\n              <li className=\"\" key={key}>\n                <a href={i.url} target=\"_blank\" rel=\"noopener noreferrer\">{i.label}</a> ({i.from})\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <div className=\"text-right\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={\"http://localhost:5000/edit-plant/select-images/\" + plant.slug}>Edit</a></div>\n        </div>\n        <div className=\"col-6 order-first\">\n          <div className=\"row\">\n            <div className=\"col-3 order-first\">\n              {imgArr.map( (image, key) => (\n                <figure className=\"figure\" key={key}>\n                  <img src={iNatSrc + image.id + \"/large.\" + image.fileType} alt={image.alt} className=\"img-fluid\" />\n                </figure>\n                )\n              )}\n            </div>\n            <div className=\"col-9\">\n              {imgArr.map( (image, key) => (\n                <figure className=\"figure\" key={key}>\n                  <img src={iNatSrc + image.id + \"/large.\" + image.fileType} alt={image.alt} className=\"img-fluid\" />\n                  { image.license !== \"cc0\" ? <figcaption className=\"figure-caption\">{image.credit}</figcaption> : null }\n                </figure>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\nexport default Plant;\n\n/*\n<p>\n  ({plant.taxa.scientificAlts.map( (i, key) => (\n      i\n    )\n  ).join(\", \")})\n</p>\n*/\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom';\nimport NoMatch from './pages/NoMatch';\nimport Home from './pages/Home';\nimport Plant from './pages/Plant';\n\nclass AppRoute extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n    //console.log(this.props);\n    //console.log(this.props.plants);\n  }\n\n\n\n  render() {\n    console.log(this.props);\n    //console.log(this.props.searchTerm);\n    return(\n      <Switch>\n        <Route exact path=\"/locaflora\" render={\n            props =>\n              <Home {...props}\n                key=\"homeURL\"\n                plants={this.props.plants}\n                country={this.props.country}\n                state_={this.props.state_}\n                showFavorites={false}\n              />\n          }\n        />\n        <Route strict path=\"/search\" render={\n          props =>\n            <Home {...props}\n              key=\"searchURL\"\n              plants={this.props.plants}\n              country={this.props.country}\n              state_={this.props.state_}\n              showFavorites={false}\n            />\n          }\n        />\n        <Route exact path=\"/my-favorites\" render={\n          props =>\n            <Home {...props}\n              key=\"favoritesURL\"\n              plants={this.props.plants}\n              country={this.props.country}\n              state_={this.props.state_}\n              showFavorites={true}\n            />\n          }\n        />\n        <Route exact path=\"/plant/:plantSlug\" render={\n          props =>\n            <Plant {...props}\n              key={props.match.params.plantSlug}\n              plants={this.props.plants}\n              country={this.props.country}\n              state_={this.props.state_}\n            />\n          }\n        />\n        <Route component={NoMatch} />\n      </Switch>\n    );\n  }\n}\nexport default AppRoute;\n","import React from 'react'\nimport { Typeahead } from 'react-bootstrap-typeahead'; // ES2015\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { withRouter } from 'react-router-dom'\n\nexport function sortAlpha(a, b) {\n  return (a < b) ? -1 : (a > b) ? 1 : 0;\n}\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: []\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(termArr) {\n    console.log(this.state.term);\n    this.props.history.push({\n      pathname: '/search',\n      search: '?q=' + this.state.term\n    });\n    console.log(this.props.history);\n    /*\n    history.push({\n      pathname: '/search',\n      search: '?' + this.state.term\n    });\n    */\n    //this.history.push(\"/search\");\n    //this.props.history.push('/search')\n    //this.props.onChange(termArr);\n  }\n\n  render() {\n    const plants = this.props.plants\n    let options = [];\n    plants.forEach( item => {\n      options.push(item.name)\n      options.push(item.taxa.commonName)\n      if (!options.includes(item.taxa.genus)) options.push(item.taxa.genus)\n      if (!options.includes(item.taxa.scientificFamily)) options.push(item.taxa.scientificFamily)\n      if (item.taxa.commonFamily && !options.includes(item.taxa.commonFamily)) options.push(item.taxa.commonFamily)\n      if (item.taxa.commonAlts.length > 0) {\n        item.taxa.commonAlts.forEach(i => {\n          options.push(i)\n        })\n      }\n    })\n\n    options.sort( function (a, b) {\n      //a = a['term'].toLowerCase();\n      //b = b['term'].toLowerCase();\n      if(a < b) { return -1; }\n      if(a > b) { return 1; }\n      return 0;\n    })\n\n    //console.log(options);\n\n    return (\n      <form className=\"form-inline float-right\" onSubmit={this.handleSubmit}>\n        <div className=\"input-group\">\n          <Typeahead\n            onChange={ selected => {\n              this.setState({\n                term: selected[0]\n              });\n            }}\n            clearButton\n            id=\"findPlant\"\n            options={options}\n            placeholder=\"Find a Plant\"\n          />\n          <div className=\"input-group-append\">\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n          </div>\n        </div>\n      </form>\n    )\n  }\n}\n\n//export default SearchForm\nexport default withRouter(SearchForm)\n\n\n/*\n<div class=\"input-group mb-3\">\n  <input type=\"text\" class=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\">\n  <div class=\"input-group-append\">\n    <button class=\"btn btn-outline-secondary\" type=\"button\">Button</button>\n  </div>\n</div>\n\nonChange={this.handleChange}\n\nselected={this.state.selected}\n\n<Typeahead\n    onChange={(selected) => {\n      this.setState({selected});\n    }}\n    selected={this.state.selected}\n    id=\"findPlant\"\n    labelKey=\"term\"\n    options={options}\n    placeholder=\"Find a Plant\"\n/>\n\n\n{ id: item.id,\n  name: item.name,\n  commonName: item.taxa.commonName,\n  genus: item.taxa.genus,\n  family: item.taxa.scientificFamily\n}\n\n\n\n<form className=\"form-inline float-right\">\n  <label className=\"sr-only\" htmlFor=\"searchPlant\">Find a Plant</label>\n  <input type=\"text\" className=\"form-control mb-2 mr-sm-2\" id=\"searchPlant\" placeholder=\"Find a Plant\" />\n  <button type=\"submit\" className=\"btn btn-primary mb-2\">Search</button>\n</form>\n*/\n","import React from 'react'\nimport { Link } from \"react-router-dom\";\nimport SearchForm from \"../components/SearchForm\";\n\nclass TopBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //selected: [{term:\"\"}]\n    }\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleSearch(termArr) {\n    //console.log(termArr);\n    this.props.onChange(termArr);\n  }\n  render(){\n    //console.log(this.props.plants);\n    return (\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <Link to=\"/my-favorites\" className=\"btn btn-primary\">Review Favorites</Link>\n        </div>\n        <div className=\"col-6 text-right\">\n          <SearchForm plants={this.props.plants} onChange={this.handleSearch} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TopBar\n","import React from 'react'\nimport { Link, NavLink } from \"react-router-dom\";\n\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light\">\n      <Link to=\"/\" className=\"navbar-brand\">Project Locaflora</Link>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navMain\" aria-controls=\"navMain\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navMain\">\n        <ul className=\"navbar-nav mr-auto\">\n            <NavLink\n\n              className=\"nav-link\"\n              activeClassName=\"active\"\n              to={{\n                  pathname: `/`\n                }}\n            >\n              Home\n              </NavLink>\n\n        </ul>\n      </div>\n    </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst SiteLocation = (props) => {\n  return (\n    <h1 className=\"site-title\">Native Plants of {props.state_}</h1>\n  )\n}\n\nexport default SiteLocation\n","import React from 'react';\n//import Header from './components/Header';\nimport Spinner from './components/Spinner';\nimport AppRoutes from './AppRoutes';\nimport TopBar from './components/TopBar'\nimport Navbar from './components/Navbar'\nimport SiteLocation from './components/SiteLocation'\n\nimport { getStoredPlants } from './actions/getStoredPlants';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasPlants: false,\n      searchTerm: \"\",\n      plants: []\n    }\n    this.country=\"US\"\n    this.state_=\"NC\"\n    //console.log(\"Main\");\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  componentDidMount() {\n    //console.log(\"Main componentDidMount\");\n    return getStoredPlants().then(data => {\n      //console.log(data);\n      this.setState({\n        hasPlants: true,\n        activePlants: data,\n        plants: data,\n      })\n    });\n  }\n\n  handleUpdate(plants) {\n    this.setState({\n      plants: plants\n    })\n  }\n\n  handleSearch(termArr) {\n    //console.log(termArr);\n    this.setState({\n      searchTerm: termArr\n    })\n  }\n\n  render () {\n    //console.log(this.state.searchTerm);\n    return (\n      <div>\n        <div className=\"header\">\n          <div className=\"container-fluid container-main\">\n            <TopBar plants={this.state.plants} onChange={this.handleSearch} />\n          </div>\n          <div className=\"container-nav\">\n            <div className=\"container-fluid container-main\">\n              <div className=\"row\">\n                  <Navbar />\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container-fluid container-main\">\n          <SiteLocation country={this.country} state_={this.state_} />\n          {this.state.searchTerm}\n          { this.state.hasPlants !== false ?\n            <AppRoutes plants={this.state.plants} searchTerm={this.state.searchTerm}  country={this.country} state_={this.state_} />\n            : <div className=\"text-center\"><br /><br /><br /><Spinner /></div>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n\n\n/*        <Header plants={this.state.plants} country={this.country} state_={this.state_} />\n*/\n","export function getStoredPlants() {\n  //console.log('getStoredPlants');\n  return fetch(process.env.PUBLIC_URL + \"/data/plants.json\", {\n    headers : {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n     }\n  })\n  .then(response => response.json())\n  .then(data => {\n    //console.log(data);\n    return data\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Main />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}