{"version":3,"sources":["components/plants/plantDefaultImage.svg","components/Navbar.jsx","components/SiteLocation.jsx","components/Header.jsx","components/Spinner.jsx","pages/NoMatch.jsx","components/plants/PlantCard.jsx","components/plants/PlantsGrid.jsx","components/sort/SortForm.js","components/filter/FilterGroupCheckbox.js","components/filter/FilterGroupRadio.js","actions/getFieldofObj.js","components/filter/FilterForm.js","pages/PlantsList.jsx","pages/Home.jsx","components/Breadcrumbs.jsx","pages/Plant.jsx","AppRoutes.jsx","Main.jsx","actions/getStoredPlants.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","activeClassName","pathname","SiteLocation","Header","Spinner","props","size","role","NoMatch","PlantCard","orient","plant","thumb1","src","plantDefaultImage","alt","name","t1","thumb","height","width","sm","md","lg","Math","round","default","srcSet","fileType","sizes","slug","state","taxa","commonName","lightNeeds","map","item","index","arr","key","flowers","colors","length","color","style","backgroundColor","colorsArr","border","fruits","href","PlantGrid","plants","SortForm","handleChange","bind","e","sortBy","target","value","sortType","selectedIndex","getAttribute","this","onChange","htmlFor","data-sorttype","React","Component","FilterGroupCheckbox","activeFilters","filterName","filterValue","filters","find","match","checked","options","push","pop","setState","filter","label","option","data-filtername","defaultChecked","getFieldofObj","obj","k","keys","split","values","k1","k2","filterNames","FilterForm","changeFilter","forEach","i","fieldsObj","fields","FilterGroupRadio","PlantsList","changeSort","sortKey","sort","a","b","a_sortBy","b_sortBy","activePlants","activeFiltersCount","filterGroup","console","log","filterKey","plantFieldArr","Array","isArray","some","indexOf","PlantsGrid","Home","Breadcrumbs","aria-current","Plant","params","plantSlug","imgArr","concat","images","license","iNatSrc","plantTypes","scientificFamily","commonFamily","scientificAlts","commonAlts","native","regions","exotic","lifeCycle","conspicuous","seasons","months","soils","moistureNeeds","types","phNeeds","nitrogen","leaves","fallColors","retention","min","max","unit","spread","attracts","tolerant","gardens","externalLinks","url","rel","sources","from","image","credit","AppRoute","exact","path","render","component","Main","handleUpdate","fetch","process","headers","then","response","json","data","AppRoutes","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.600f582c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plantDefaultImage.8ede97b7.svg\";","import React from 'react'\nimport { Link, NavLink } from \"react-router-dom\";\n\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link to=\"/\" className=\"navbar-brand\">Project Locaflora</Link>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navMain\" aria-controls=\"navMain\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navMain\">\n        <ul className=\"navbar-nav mr-auto\">\n            <NavLink\n\n              className=\"nav-link\"\n              activeClassName=\"active\"\n              to={{\n                  pathname: `/`\n                }}\n            >\n              Home\n              </NavLink>\n\n        </ul>\n      </div>\n    </nav>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst SiteLocation = () => {\n  return (\n    <div className=\"container-fluid\">\n      <h1 className=\"site-title h3\">Native Plants of North Carolina</h1>\n    </div>\n  )\n}\n\nexport default SiteLocation\n","import React from 'react'\n//import Header from './TopBar';\nimport Navbar from './Navbar';\nimport SiteLocation from './SiteLocation';\n\n\nconst Header = () =>  {\n  return (\n    <div className=\"header\">\n      {/*<TopBar />*/}\n      <Navbar />\n      <SiteLocation />\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react';\n\nfunction Spinner(props) {\n  let size = \"\";\n  if (props.size === 'sm') size='spinner-border-sm'\n  return(\n      <div className={\"spinner-border text-primary ml-3 \" + size} role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n  );\n}\n\nexport default Spinner\n","import React from 'react'\n\nconst NoMatch = () => (\n  <div className=\"container-fluid\">\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <h1>Page not found</h1>\n      </div>\n    </div>\n  </div>\n);\n\nexport default NoMatch;\n","import React from 'react'\n//import PlantFeature from './PlantFeature';\n//import { labels } from '../../data/cleanData'\n\nimport { Link } from \"react-router-dom\";\nimport plantDefaultImage from './plantDefaultImage.svg';\nimport colorsArr from '../../data/colors.json';\n\n\nconst PlantCard = props =>  {\n  //console.log(props.plant);\n  //console.log(plantDefaultImage);\n  const plant = props.plant\n  let thumb1 = <img src={plantDefaultImage} alt={plant.name} className=\"card-img-top\" />;\n  let orient\n  let t1 = plant.thumb['1'][0]\n  if (t1) {\n    let height = t1.height\n    let width = t1.width\n    orient = \"horiz\"\n    if ((height / width) > 1) orient = \"vert\"\n    let sm = 240\n    let md = 500\n    let lg = 1024\n    if (orient === \"vert\") {\n      sm = Math.round((width * 240) / height)\n      md = Math.round((width * 500) / height)\n      lg = Math.round((width * 1024) / height)\n    }\n\n    thumb1 = <img\n      alt={t1.alt}\n      className={'card-img-top img-' + orient }\n      src={t1.default}\n      srcSet={\n        \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm +\"w\" + \", \"\n        + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md +\"w\" + \", \"\n        + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg +\"w\"\n      }\n      sizes=\"100vw\"\n      />;\n      //console.log(thumb1.props.srcSet);\n\n      /*\n      sm = sm + \"w\"\n      md = md + \"w\"\n      lg = lg + \"w\"\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg\n\n      \"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" \" + sm +\"w\" + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" \" + md +\"w\" + \", \"\n      + \"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" \" + lg +\"w\"\n\n      for horizonatal images.\n      sm = 240\n      md = 500\n      lg = 1024\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/small.\" + t1.fileType + \" 240w\"}\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/medium.\" + t1.fileType + \" 500w\"}\n      srcset={\"https://static.inaturalist.org/photos/\" + t1.id + \"/large.\" + t1.fileType + \" 1024w\"}\n      for vertical images.\n      if (orient ==== \"vert\") {\n        sm = (width * 240) / height\n        md = (width * 500) / height\n        lg = (width * 1024) / height\n      }\n\n\n      srcset=\"elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w\"\n     sizes=\"(max-width: 600px) 480px,\n            800px\"\n            */\n  }\n  if (plant.thumb['2'][0]) {\n    //let thumb2 = <img src={plant.thumb['2'][0].default} alt={plant.thumb['2'][0].alt} className='card-img-top' />;\n  }\n\n  return (\n    <div className=\"col-12 col-sm-6 col-md-6 col-lg-4 col-xl-3 mb-4\">\n      <div className=\"card h-100\">\n        <Link to={{\n          pathname: `/plant/${plant.slug}`,\n          state: { plant :  plant }\n        }}>\n          <div className=\"card-head\">\n            {thumb1}\n          </div>\n        </Link>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            <Link to={{\n              pathname: `/plant/${plant.slug}`,\n              state: { plant :  plant }\n            }}>\n              {plant.name}\n            </Link>\n          </h5>\n          {plant.taxa.commonName}\n          <dl className=\"row\">\n            <dt className=\"col-12\">Light</dt>\n            <dd className=\"col-12\">{\n              plant.lightNeeds.map((item, index, arr) =>(\n                  <span key={index}>{(index ? \", \" : \"\") + item}</span>\n                )\n              )}\n            </dd>\n          </dl>\n          {plant.flowers.colors.length > 0 ? (\n            <dl className=\"row\">\n              <dt className=\"col-12\">Flowers</dt>\n              <dd className=\"col-12\">{\n                plant.flowers.colors.map((color, index) =>\n                  <span\n                    key={index}\n                    className=\"color-block\"\n                    style={{backgroundColor:  colorsArr[color], border: \"1px solid #ccc\"} }\n                  >\n                  </span>\n                )}\n              </dd>\n            </dl>\n          ) : null}\n          {plant.fruits.colors.length > 0 ? (\n            <dl className=\"row\">\n              <dt className=\"col-12\">Fruits</dt>\n              <dd className=\"col-12\">{\n                plant.fruits.colors.map((color, index) =>\n                  <span\n                    key={index}\n                    className=\"color-block\"\n                    style={{backgroundColor:  colorsArr[color], border: \"1px solid #ccc\"} }\n                  >\n                  </span>\n                )}\n              </dd>\n            </dl>\n          ) : null}\n          <div className=\"text-right\"><a href={\"http://localhost:5000/edit-plant/select-images/\" + plant.slug}>Edit</a></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PlantCard\n\n/*\n<PlantFeature dt={''} dd={props.plant.taxa.commonName} />\n<PlantFeature dt={labels.height.ranges} dd={props.plant.height.ranges} />\n<PlantFeature dt={labels.lightNeeds} dd={props.plant.lightNeeds} />\n<PlantFeature dt={labels.soil.moistureNeeds} dd={props.plant.soil.moistureNeeds} />\n<PlantFeature dt={labels.flowers.seasons} dd={props.plant.flowers.seasons} />\n<dt className=\"col-12\">{labels.flowers.colors}</dt>*/\n","import React from 'react'\nimport PlantCard from './PlantCard'\n\nconst PlantGrid = props => {\n  return (\n    <div className=\"row row-cols-6\">\n      {props.plants.map( plant => {\n          return <PlantCard plant={plant} key={plant.id} />\n        })\n      }\n    </div>\n  )\n}\nexport default PlantGrid\n\n\n\n//return plant.isActive === true ?\n","import React from 'react'\n//import SortOption from './SortOption'\n\nexport class SortForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const sortBy = e.target.value;\n    const sortType = e.target[e.target.selectedIndex].getAttribute('data-sorttype');\n    this.props.onChange(sortBy,sortType);\n  }\n  render() {\n    return (\n      <div className=\"form-group row\">\n        <label htmlFor=\"select-sort-by\" className=\"col-sm-4 col-form-label\">Sort by</label>\n        <div className=\"col-sm-8\">\n          <select id=\"select-sort-by\" className=\"custom-select\" onChange={this.handleChange}>\n            <option value=\"name\" data-sorttype=\"alpha\">Scientific Name</option>\n            <option value=\"height.max\" data-sorttype=\"num\">Height - Maximum</option>\n            <option value=\"taxa.commonName\" data-sorttype=\"alpha\">Common Name</option>\n          </select>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SortForm;\n","import React from 'react'\n\n\nexport class FilterGroupCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeFilters: this.props.activeFilters\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    //console.log('handleChange check');\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const filterValue = e.target.value;\n    //console.log(filterValue);\n    let activeFilters = this.state.activeFilters;\n    //console.log(activeFilters);\n    //console.log(activeFilter.length);\n    // setup the activeFilter array as soon as something is clicked\n    let match = activeFilters.find( item => item.name === filterName );\n    //console.log(match);\n    //console.log(match.options);\n    if (e.target.checked) {\n      match.options.push(filterValue);\n      //console.log(match.options);\n    } else {\n      match.options.pop(filterValue);\n      //console.log(match.options);\n    }\n    //console.log(activeFilters);\n    this.setState({\n      activeFilters: activeFilters\n    })\n    this.props.onChange(activeFilters);\n  }\n\n  render(){\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const id = filterName + \"-\";\n    return (\n      <div>\n        <h3 data-toggle=\"collapse\" href={'#' + id + 'filter'} role=\"button\" aria-controls={id + 'filter'}>\n          <label>{filter.label}</label>\n        </h3>\n        <div className=\"collapse show\" id={id + 'filter'}>\n          <div className=\"card card-body\">\n            {filter.options.map( (option, key) => (\n              <div className=\"form-check\" key={key}>\n                <input className=\"form-check-input\" type=\"checkbox\" data-filtername={filterName} value={option} id={id + option} onChange={this.handleChange} />\n                <label className=\"form-check-label\" htmlFor={option}>{option}</label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default FilterGroupCheckbox\n","import React from 'react'\n\n\nexport class FilterGroupCheckbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeFilters: this.props.activeFilters\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    //console.log('handleChange check');\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const filterValue = e.target.value;\n    //console.log(filterValue);\n    let activeFilters = this.state.activeFilters;\n    //console.log(activeFilters);\n    //console.log(activeFilter.length);\n    // setup the activeFilter array as soon as something is clicked\n    let match = activeFilters.find( item => item.name === filterName );\n    //console.log(match);\n    //console.log(match.options);\n    if (filterValue === \"all\") {\n      //console.log(\"1\");\n      match.options = filter.options\n    } else if (e.target.checked) {\n      //console.log(\"2\");\n      match.options = [filterValue]\n      //console.log(match.options);\n    } else {\n      //console.log(\"3\");\n      match.options = []\n      //console.log(match.options);\n    }\n    //console.log(activeFilters);\n    this.setState({\n      activeFilters: activeFilters\n    })\n    this.props.onChange(activeFilters);\n  }\n\n  render(){\n    const filterName = this.props.filterName\n    const filter = this.props.filters.find( item => item.name === filterName );\n    const id = filterName + \"-\";\n    return (\n      <div>\n        <h3 data-toggle=\"collapse\" href={'#' + id + 'filter'} role=\"button\" aria-controls={id + 'filter'}>\n          <label>{filter.label}</label>\n        </h3>\n        <div className=\"collapse show\" id={id + 'filter'}>\n          <div className=\"card card-body\">\n            <div className=\"form-check\" key=\"none\">\n              <input className=\"form-check-input\" type=\"radio\" name={\"radio-\" + filterName} defaultChecked value=\"all\" id={id + \"all\"} data-filtername={filterName} onChange={this.handleChange} />\n              <label className=\"form-check-label\" htmlFor=\"all\">Show All</label>\n            </div>\n            {filter.options.map( (option, key) => (\n              <div className=\"form-check\" key={key}>\n                <input className=\"form-check-input\" type=\"radio\" name={\"radio-\" + filterName} value={option} id={id + option} data-filtername={filterName} onChange={this.handleChange} />\n                <label className=\"form-check-label\" htmlFor={option}>{option}</label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default FilterGroupCheckbox\n\n/*\n<div className=\"form-check\" key=\"none\">\n  <input className=\"form-check-input\" type=\"radio\" name={\"radio-\" + filterName} value=\"\" id={id + \"none\"} data-filtername={filterName} onChange={this.handleChange} />\n  <label className=\"form-check-label\" htmlFor=\"\">None</label>\n</div>\n*/\n","export function getFieldofObj(obj, k) {\n  let keys = k.split(\".\");\n  let values = obj[k];\n  if (keys.length === 2) {\n    let k1 = keys[0];\n    let k2 = keys[1];\n    values = obj[k1][k2]\n  }\n//  console.log(values);\n  return values\n}\n","import React from 'react'\nimport FilterGroupCheckbox from './FilterGroupCheckbox'\nimport FilterGroupRadio from './FilterGroupRadio'\nimport { getFieldofObj } from '../../actions/getFieldofObj.js';\nimport fields from '../../data/fields.json';\n\nconst filterNames = [\n  \"plantTypes\",\n  \"lifeCycle\",\n  \"lightNeeds\",\n  \"flowers.colors\",\n  \"flowers.seasons\"\n]\n\nexport class FilterForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeFilter = this.changeFilter.bind(this);\n  }\n\n  changeFilter(activeFilters) {\n    //console.log(activeFilters);\n    this.props.onChange(activeFilters);\n  }\n\n  render() {\n    //console.log(fields);\n    //console.log(filterNames);\n    let filters = []\n    let activeFilters = []\n    filterNames.forEach( (k, i) => {\n      let fieldsObj = getFieldofObj(fields, k)\n      //console.log(fieldsArr);\n      filters.push(\n        {\n          name: k,\n          label: fieldsObj.label,\n          options: fieldsObj.options\n        }\n      )\n      activeFilters.push(\n        {\n          name: k,\n          options: []\n        }\n      )\n    });\n\n    //console.log(filters);\n    return (\n      <div className=\"bg-light\">\n        <legend>Filter By</legend>\n        <FilterGroupRadio onChange={this.changeFilter} filterName=\"plantTypes\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"lightNeeds\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"flowers.colors\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupCheckbox onChange={this.changeFilter} filterName=\"flowers.seasons\" filters={filters} activeFilters={activeFilters} />\n        <FilterGroupRadio onChange={this.changeFilter} filterName=\"lifeCycle\" filters={filters} activeFilters={activeFilters} />\n      </div>\n\n    )\n  }\n}\n\nexport default FilterForm;\n\n/*\n{filters.map( (filter, key) => (\n  <FilterGroupCheckbox onChange={this.changeFilter} filter={filter} activeFilters={activeFilters} key={key} />\n))}\n*/\n","import React from 'react'\nimport PlantsGrid from '../components/plants/PlantsGrid'\nimport SortForm from '../components/sort/SortForm'\nimport FilterForm from '../components/filter/FilterForm'\nimport { getFieldofObj } from '../actions/getFieldofObj.js';\n\nexport class PlantsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plants: this.props.plants,\n    };\n    this.changeSort = this.changeSort.bind(this);\n    this.changeFilter = this.changeFilter.bind(this);\n  }\n\n  changeSort(sortBy, sortType) {\n    //console.log('changeSort');\n    //console.log(newSortBy);\n    let plants = this.state.plants\n\n    var sortKey = sortBy.split('.');\n\n    if (sortType === 'alpha') {\n      plants.sort( function (a, b) {\n        let a_sortBy = a[sortKey[0]];\n        let b_sortBy = b[sortKey[0]];\n        if (sortKey.length === 2) {\n          a_sortBy = a[sortKey[0]][sortKey[1]];\n          b_sortBy = b[sortKey[0]][sortKey[1]];\n        }\n        if(a_sortBy < b_sortBy) { return -1; }\n        if(a_sortBy > b_sortBy) { return 1; }\n        return 0;\n      });\n    }\n    if (sortType === 'num') {\n      plants.sort( function (a, b) {\n        let a_sortBy = a[sortKey[0]];\n        let b_sortBy = b[sortKey[0]];\n        if (sortKey.length === 2) {\n          a_sortBy = a[sortKey[0]][sortKey[1]];\n          b_sortBy = b[sortKey[0]][sortKey[1]];\n        }\n        return a_sortBy - b_sortBy;\n      });\n    }\n    this.setState({\n      plants: plants,\n    })\n  }\n\n  changeFilter(activeFilters) {\n    //console.log(activeFilters);\n    //let plants = this.props.plants\n    let plants = this.props.plants\n    let activePlants = plants\n    let activeFiltersCount = 0\n    activeFilters.forEach( (filterGroup, index, arr) => {\n      //|| !(filterGroup.options.includes(\"all\")\n      if (filterGroup.options.length > 0) {\n        console.log(filterGroup.options);\n        console.log(filterGroup.options.length);\n        console.log(activeFiltersCount);\n        activeFiltersCount++\n        console.log(activeFiltersCount);\n        //console.log(filterGroup);\n        let filterKey = filterGroup.name;\n        //console.log(filterKey);\n          activePlants = activePlants.filter( plant => {\n            let plantFieldArr = getFieldofObj(plant, filterKey)\n            if (!Array.isArray(plantFieldArr)) plantFieldArr = [plantFieldArr]\n            //console.log(filterKey);\n            //console.log(plantFieldArr);\n            //console.log(filterGroup.options);\n\n            if (plantFieldArr.length === 0) {\n              //console.log(\"equal 0\");\n              return false\n            }\n            else if (plantFieldArr.length > 0) {\n              //console.log(\"> 0\");\n              //console.log(filterGroup);\n              //return filterGroup.options.some(item => filterGroup.options.indexOf(item) >= 0 );\n              return plantFieldArr.some(item => filterGroup.options.indexOf(item) >= 0 );\n            } else {\n              //console.log(\"else\");\n              return true\n            }\n          });\n        }\n    });\n    console.log(activeFiltersCount);\n    if (activeFiltersCount === 0) activePlants = plants\n    //console.log(activePlants);\n    this.setState({\n      plants: activePlants\n    })\n  }\n\n  render() {\n    console.log(this.state.plants);\n\n    return(\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-3\">\n            <SortForm onChange={this.changeSort} />\n            <FilterForm onChange={this.changeFilter} />\n          </div>\n          <div className=\"col-9\">\n            <div className=\"text-right\">{this.state.plants.length} items</div>\n            <PlantsGrid plants={this.state.plants} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PlantsList;\n\n\n//            <Sidebar onChange={this.changeSort}/>\n//\n","import React from 'react'\nimport PlantsList from './PlantsList'\n\nconst Home = props => {\n  const plants = props.plants\n  return(\n    <PlantsList plants={plants}/>\n  );\n}\n\nexport default Home;\n","import React from 'react'\n\nconst Breadcrumbs = props =>  (\n  <nav aria-label=\"breadcrumb\">\n    <ol className=\"breadcrumb\">\n      <li className=\"breadcrumb-item\"><a href=\"/\">Home</a></li>\n      {/*<li className=\"breadcrumb-item\">\n        <a href=\"/\">??</a>\n      </li>\n      */}\n      <li className=\"breadcrumb-item active\" aria-current=\"page\">{props.plant.name}</li>\n    </ol>\n  </nav>\n)\n\nexport default Breadcrumbs\n","import React from 'react'\nimport Breadcrumbs from '../components/Breadcrumbs'\nimport plantDefaultImage from '../components/plants/plantDefaultImage.svg';\n\nconst Plant = props => {\n  console.log(props);\n  const plants = props.plants\n  const plant = props.plants.find(plant => plant.slug === props.match.params.plantSlug)\n  //console.log(plant);\n  let imgArr = []\n  if (plant.thumb['1'][0]) imgArr.push(plant.thumb['1'][0])\n  if (plant.thumb['2'][0]) imgArr.push(plant.thumb['2'][0])\n  imgArr = imgArr.concat(plant.images)\n  if (imgArr.length === 0 ) imgArr.push(\n    { src: plantDefaultImage,\n      alt: \"generic image\",\n      license: \"cc0\"\n    }\n  )\n  const iNatSrc = \"https://static.inaturalist.org/photos/\"\n\n  console.log(imgArr);\n  return (\n    <div className=\"container\">\n      <Breadcrumbs plant={plant} />\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <ul className=\"list-unstyled list-inline\">\n            {plant.plantTypes.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                <a href=\"/#\" >{i}</a>\n              </li>\n              )\n            )}\n          </ul>\n          <p>{plant.taxa.scientificFamily} ({plant.taxa.commonFamily})</p>\n          <h1>{plant.name}</h1>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.taxa.scientificAlts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <ul className=\"list-unstyled list-inline\">\n            <li className=\"list-inline-item list-pipe\">\n              {plant.taxa.commonName}\n            </li>\n            {plant.taxa.commonAlts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Native</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.native['US'].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h3>NC Regions</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.regions['US:NC'].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h3>Exotic</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.exotic['US'] ? plant.exotic['US'].map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            ) : null}\n          </ul>\n          <hr />\n          <h3>Life Cycle</h3>\n          <p>{plant.lifeCycle}</p>\n          <hr />\n          <h3>Flowers</h3>\n            { plant.flowers.conspicuous === true ? <p>Conspicuous Flowers</p> : null }\n          <h4>Colors</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.colors.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Bloom Season</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.seasons.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Bloom Months</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.flowers.months.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Fruits</h3>\n            { plant.fruits.conspicuous === true ? <p>Conspicuous Fruits</p> : null }\n          <h4>Colors</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.colors.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Fruiting Season</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.seasons.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Fruiting Months</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.fruits.months.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Light</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.lightNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Soil</h3>\n          <h4>Moisture Needs</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.moistureNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Soil Types</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.types.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Soil pH</h4>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.soils.phNeeds.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <h4>Nitrogen</h4>\n          { plant.nitrogen === true ? <p>Fixes Nitrogen</p> : null }\n          <hr />\n          <h3>Leaves</h3>\n          { plant.leaves.fallColors === true ? <p>Fall Colors</p> : null }\n          <h4>Retention</h4>\n          <p>{plant.leaves.retention}</p>\n          <hr />\n          <h3>Height</h3>\n          {plant.height.min} – {plant.height.max} {plant.height.unit}\n          <hr />\n          <h3>Spread</h3>\n          {plant.spread.min} – {plant.spread.max} {plant.spread.unit}\n          <hr />\n          <h3>Attracts</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.attracts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Tolerant</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.tolerant.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Problems</h3>\n          <ul className=\"list-unstyled list-inline\">\n            {plant.attracts.map( (i, key) => (\n              <li className=\"list-inline-item list-pipe\" key={key}>\n                {i}\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Gardens</h3>\n          { plant.gardens === true ? <p>Good For Gardens</p> : null }\n          <hr />\n          <h3>External Links</h3>\n          <ul className=\"list-unstyled\">\n            {plant.externalLinks.map( (i, key) => (\n              <li className=\"\" key={key}>\n                <a href={i.url} target=\"_blank\" rel=\"noopener noreferrer\">{i.label}</a>\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <h3>Sources</h3>\n          <ul className=\"list-unstyled\">\n            {plant.sources.map( (i, key) => (\n              <li className=\"\" key={key}>\n                <a href={i.url} target=\"_blank\" rel=\"noopener noreferrer\">{i.label}</a> ({i.from})\n              </li>\n              )\n            )}\n          </ul>\n          <hr />\n          <div className=\"text-right\"><a href={\"http://localhost:5000/edit-plant/select-images/\" + plant.slug}>Edit</a></div>\n        </div>\n        <div className=\"col-6 order-first\">\n          <div className=\"row\">\n            <div className=\"col-3 order-first\">\n              {imgArr.map( (image, key) => (\n                <figure className=\"figure\" key={key}>\n                  <img src={iNatSrc + image.id + \"/large.\" + image.fileType} alt={image.alt} className=\"img-fluid\" />\n                </figure>\n                )\n              )}\n            </div>\n            <div className=\"col-9\">\n              {imgArr.map( (image, key) => (\n                <figure className=\"figure\" key={key}>\n                  <img src={iNatSrc + image.id + \"/large.\" + image.fileType} alt={image.alt} className=\"img-fluid\" />\n                  { image.license !== \"cc0\" ? <figcaption className=\"figure-caption\">{image.credit}</figcaption> : null }\n                </figure>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Plant;\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom';\nimport NoMatch from './pages/NoMatch';\nimport Home from './pages/Home';\nimport Plant from './pages/Plant';\n\nclass AppRoute extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n    //console.log(props);\n    //console.log(this.props.plants);\n  }\n\n\n\n  render() {\n    return(\n      <Switch>\n        <Route exact path=\"/\" render={props => <Home {...props} plants={this.props.plants} />} />\n        <Route exact path=\"/plant/:plantSlug\" render={props => <Plant {...props} plants={this.props.plants} key={props.match.params.plantSlug} />} />\n        <Route component={NoMatch} />\n      </Switch>\n    );\n  }\n}\nexport default AppRoute;\n","import React from 'react';\nimport Header from './components/Header';\nimport Spinner from './components/Spinner';\nimport AppRoutes from './AppRoutes';\n\nimport { getStoredPlants } from './actions/getStoredPlants';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      plants: false\n    }\n    //console.log(\"Main\");\n    this.handleUpdate = this.handleUpdate.bind(this);\n\n  }\n\n  componentDidMount() {\n    //console.log(\"Main componentDidMount\");\n    return getStoredPlants().then(data => {\n      //console.log(data);\n      this.setState({\n        plants: data\n      })\n    });\n  }\n\n  handleUpdate(plants) {\n    this.setState({\n      plants: plants\n    })\n  }\n\n  render () {\n    return (\n      <div>\n        <Header />\n        { this.state.plants !== false ?\n          <AppRoutes plants={this.state.plants} />\n          : <div className=\"text-center\"><br /><br /><br /><Spinner /></div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","export function getStoredPlants() {\n  //console.log('getStoredPlants');\n  return fetch(process.env.PUBLIC_URL + \"/data/plants.json\", {\n    headers : {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n     }\n  })\n  .then(response => response.json())\n  .then(data => {\n    //console.log(data);\n    return data\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Main />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}